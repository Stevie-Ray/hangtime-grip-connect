import { Climbro, Entralpi, ForceBoard, Motherboard, mySmartBoard, Progressor, WHC06 } from "@hangtime/grip-connect"

let mass: number
let weight = 75
let difficulty = 0.5
let device: Climbro | Entralpi | ForceBoard | Motherboard | mySmartBoard | Progressor | WHC06

/**
 * Sets up the device selection functionality and event listeners for streaming, tare, and download actions.
 *
 * @param {HTMLSelectElement} selectElement - The HTML select element to select the device.
 * @param {HTMLDivElement} outputElement - The HTML element to display output/erros.
 */
export function setupDevice(selectElement: HTMLSelectElement, outputElement: HTMLDivElement) {
  selectElement.addEventListener("change", async () => {
    const selectedDevice = selectElement.value

    if (selectedDevice === "climbro") {
      device = new Climbro()
    } else if (selectedDevice === "entralpi") {
      device = new Entralpi()
    } else if (selectedDevice === "forceboard") {
      device = new ForceBoard()
    } else if (selectedDevice === "motherboard") {
      device = new Motherboard()
    } else if (selectedDevice === "smartboard") {
      device = new mySmartBoard()
    } else if (selectedDevice === "progressor") {
      device = new Progressor()
    } else if (selectedDevice === "whc06") {
      device = new WHC06()
    }

    // Handle notifications
    device.notify((data) => {
      mass = Number(data.massTotal)
    })

    await device.connect(
      async () => {
        if (device instanceof ForceBoard || device instanceof Motherboard || device instanceof Progressor) {
          // Request notifications
          await device.stream()
        }
      },
      (error: Error) => {
        outputElement.innerHTML = error.message
        outputElement.style.display = "flex"
      },
    )
  })
}

export function setupDifficulty(element: HTMLSelectElement) {
  element.addEventListener("change", () => {
    const selectedDifficulty = element.value

    if (selectedDifficulty === "easy") {
      difficulty = 0.75
    }
    if (selectedDifficulty === "normal") {
      difficulty = 0.5
    }
    if (selectedDifficulty === "hard") {
      difficulty = 0.25
    }
  })
}

export function setupWeight(element: HTMLInputElement) {
  element.addEventListener("change", () => {
    weight = Number(element.value)
  })
}

// Audio (Game sounds) in base64 format.
const beep1: HTMLAudioElement = new Audio(
  "data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=",
)
const beep2: HTMLAudioElement = new Audio(
  "data:audio/wav;base64,",
)
const beep3: HTMLAudioElement = new Audio(
  "data:audio/wav;base64,",
)
enum DIRECTION {
  IDLE = 0,
  UP = 1,
  DOWN = 2,
  LEFT = 3,
  RIGHT = 4,
}

const rounds: number[] = [5, 5, 3, 3, 2]
const colors: string[] = ["#1abc9c", "#2ecc71", "#3498db", "#e74c3c", "#9b59b6"]

interface BallType {
  width: number
  height: number
  x: number
  y: number
  moveX: DIRECTION
  moveY: DIRECTION
  speed: number
}

interface PaddleType {
  width: number
  height: number
  x: number
  y: number
  score: number
  move: DIRECTION
  speed: number
  wins: number
}

const Ball = {
  new: function (this: GameType, incrementedSpeed?: number): BallType {
    return {
      width: 18,
      height: 18,
      x: this.canvas.width / 2 - 9,
      y: this.canvas.height / 2 - 9,
      moveX: DIRECTION.IDLE,
      moveY: DIRECTION.IDLE,
      speed: incrementedSpeed || 9,
    }
  },
}

const Paddle = {
  new: function (this: GameType, side: "left" | "right"): PaddleType {
    return {
      width: 18,
      height: 70,
      x: side === "left" ? 150 : this.canvas.width - 150,
      y: this.canvas.height / 2 - 35,
      score: 0,
      move: DIRECTION.IDLE,
      speed: 10,
      wins: 0,
    }
  },
}

interface GameType {
  canvas: HTMLCanvasElement
  context: CanvasRenderingContext2D
  player: PaddleType
  paddle: PaddleType
  ball: BallType
  running: boolean
  over: boolean
  turn: PaddleType | null
  timer: number
  round: number
  color: string
  initialize: () => void
  endGameMenu: (text: string) => void
  menu: () => void
  update: () => void
  draw: () => void
  loop: () => void
  listen: () => void
  _resetTurn: (victor: PaddleType, loser: PaddleType) => void
  _turnDelayIsOver: () => boolean
  _generateRoundColor: () => string
}

const Game: GameType = {
  canvas: document.createElement("canvas"),
  context: null as unknown as CanvasRenderingContext2D,
  player: {} as PaddleType, // Temporary initialization
  paddle: {} as PaddleType, // Temporary initialization
  ball: {} as BallType, // Temporary initialization
  running: false,
  over: false,
  turn: null,
  timer: 0,
  round: 0,
  color: "#2c3e50",
  initialize: function () {
    const canvas = document.querySelector("canvas")
    if (canvas) {
      this.canvas = canvas
      const context = this.canvas.getContext("2d")
      if (context) {
        this.context = context
      }
    }

    this.canvas.width = Math.min(window.innerWidth, window.innerHeight) * 1.9 // 1.9 to keep some margin
    this.canvas.height = (5 / 7) * this.canvas.width

    this.canvas.style.width = `${this.canvas.width / 2}px`
    this.canvas.style.height = `${this.canvas.height / 2}px`

    this.player = Paddle.new.call(this, "left")
    this.paddle = Paddle.new.call(this, "right")
    this.ball = Ball.new.call(this)

    this.paddle.speed = 8
    this.running = this.over = false
    this.turn = this.paddle
    this.timer = this.round = 0
    this.color = "#2c3e50"

    Pong.menu()
    Pong.listen()
  },
  endGameMenu: async function (text) {
    // Stop Bluetooth device stream
    if (device instanceof ForceBoard || device instanceof Motherboard || device instanceof Progressor) {
      await device.stop()
    }
    // Change the canvas font size and color
    Pong.context.font = "50px Courier New"
    Pong.context.fillStyle = this.color

    // Draw the white rectangle behind the 'Press any key to begin' text.
    Pong.context.fillRect(Pong.canvas.width / 2 - 350, Pong.canvas.height / 2 - 48, 700, 100)

    // Change the canvas color;
    Pong.context.fillStyle = "#ffffff"

    // Draw the end game menu text ('Game Over' and 'Winner')
    Pong.context.fillText(text, Pong.canvas.width / 2, Pong.canvas.height / 2 + 15)

    setTimeout(function () {
      Pong = Object.assign({}, Game)
      Pong.initialize()
    }, 3000)
  },

  menu: function () {
    // Draw all the Pong objects in their current state
    Pong.draw()

    // Change the canvas font size and color
    this.context.font = "50px Courier New"
    this.context.fillStyle = this.color

    // Draw the white rectangle behind the
    // 'Press any key to begin' text.
    this.context.fillRect(this.canvas.width / 2 - 350, this.canvas.height / 2 - 48, 700, 100)

    // Change the canvas color;
    this.context.fillStyle = "#ffffff"

    // Draw the 'press any key to begin' text
    this.context.fillText("Press any key to begin", this.canvas.width / 2, this.canvas.height / 2 + 15)
  },

  // Update all objects (move the player, paddle, ball, increment the score, etc.)
  update: function () {
    if (!this.over) {
      // If the ball collides with the bound limits - correct the x and y coords.
      if (this.ball.x <= 0) Pong._resetTurn.call(this, this.paddle, this.player)
      if (this.ball.x >= this.canvas.width - this.ball.width) Pong._resetTurn.call(this, this.player, this.paddle)
      if (this.ball.y <= 0) this.ball.moveY = DIRECTION.DOWN
      if (this.ball.y >= this.canvas.height - this.ball.height) this.ball.moveY = DIRECTION.UP

      // Move player if they player.move value was updated by a keyboard event
      if (this.player.move === DIRECTION.UP) this.player.y -= this.player.speed
      else if (this.player.move === DIRECTION.DOWN) this.player.y += this.player.speed
      else if (mass) {
        this.player.y = ((mass * 10 * difficulty) / weight) * this.canvas.height
      }

      // On new serve (start of each turn) move the ball to the correct side
      // and randomize the direction to add some challenge.
      if (Pong._turnDelayIsOver.call(this) && this.turn) {
        this.ball.moveX = this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT
        this.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][Math.round(Math.random())]
        this.ball.y = Math.floor(Math.random() * this.canvas.height - 200) + 200
        this.turn = null
      }

      // If the player collides with the bound limits, update the x and y coords.
      if (this.player.y <= 0) this.player.y = 0
      else if (this.player.y >= this.canvas.height - this.player.height)
        this.player.y = this.canvas.height - this.player.height

      // Move ball in intended direction based on moveY and moveX values
      if (this.ball.moveY === DIRECTION.UP) this.ball.y -= this.ball.speed / 1.5
      else if (this.ball.moveY === DIRECTION.DOWN) this.ball.y += this.ball.speed / 1.5
      if (this.ball.moveX === DIRECTION.LEFT) this.ball.x -= this.ball.speed
      else if (this.ball.moveX === DIRECTION.RIGHT) this.ball.x += this.ball.speed

      // Handle paddle (AI) UP and DOWN movement
      if (this.paddle.y > this.ball.y - this.paddle.height / 2) {
        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y -= this.paddle.speed / 1.5
        else this.paddle.y -= this.paddle.speed / 4
      }
      if (this.paddle.y < this.ball.y - this.paddle.height / 2) {
        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y += this.paddle.speed / 1.5
        else this.paddle.y += this.paddle.speed / 4
      }

      // Handle paddle (AI) wall collision
      if (this.paddle.y >= this.canvas.height - this.paddle.height)
        this.paddle.y = this.canvas.height - this.paddle.height
      else if (this.paddle.y <= 0) this.paddle.y = 0

      // Handle Player-Ball collisions
      if (this.ball.x - this.ball.width <= this.player.x && this.ball.x >= this.player.x - this.player.width) {
        if (this.ball.y <= this.player.y + this.player.height && this.ball.y + this.ball.height >= this.player.y) {
          this.ball.x = this.player.x + this.ball.width
          this.ball.moveX = DIRECTION.RIGHT

          beep1.play()
        }
      }

      // Handle paddle-ball collision
      if (this.ball.x - this.ball.width <= this.paddle.x && this.ball.x >= this.paddle.x - this.paddle.width) {
        if (this.ball.y <= this.paddle.y + this.paddle.height && this.ball.y + this.ball.height >= this.paddle.y) {
          this.ball.x = this.paddle.x - this.ball.width
          this.ball.moveX = DIRECTION.LEFT

          beep1.play()
        }
      }
    }

    // Handle the end of round transition
    // Check to see if the player won the round.
    if (this.player.score === rounds[this.round]) {
      // Check to see if there are any more rounds/levels left and display the victory screen if
      // there are not.
      if (!rounds[this.round + 1]) {
        this.over = true
        setTimeout(function () {
          Pong.endGameMenu("Winner!")
        }, 1000)
      } else {
        // If there is another round, reset all the values and increment the round number.
        this.color = this._generateRoundColor()
        this.player.score = this.paddle.score = 0
        this.player.speed += 0.5
        this.paddle.speed += 1
        this.ball.speed += 1
        this.round += 1

        beep3.play()
      }
    }
    // Check to see if the paddle/AI has won the round.
    else if (this.paddle.score === rounds[this.round]) {
      this.over = true
      setTimeout(function () {
        Pong.endGameMenu("Game Over!")
      }, 1000)
    }
  },

  // Draw the objects to the canvas element
  draw: function () {
    // Clear the Canvas
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)

    // Set the fill style to black
    this.context.fillStyle = this.color

    // Draw the background
    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height)

    // Set the fill style to white (For the paddles and the ball)
    this.context.fillStyle = "#ffffff"

    // Draw the Player
    this.context.fillRect(this.player.x, this.player.y, this.player.width, this.player.height)

    // Draw the Paddle
    this.context.fillRect(this.paddle.x, this.paddle.y, this.paddle.width, this.paddle.height)

    // Draw the Ball
    if (Pong._turnDelayIsOver.call(this)) {
      this.context.fillRect(this.ball.x, this.ball.y, this.ball.width, this.ball.height)
    }

    // Draw the net (Line in the middle)
    this.context.beginPath()
    this.context.setLineDash([7, 15])
    this.context.moveTo(this.canvas.width / 2, this.canvas.height - 140)
    this.context.lineTo(this.canvas.width / 2, 140)
    this.context.lineWidth = 10
    this.context.strokeStyle = "#ffffff"
    this.context.stroke()

    // Set the default canvas font and align it to the center
    this.context.font = "100px Courier New"
    this.context.textAlign = "center"

    // Draw the players score (left)
    this.context.fillText(this.player.score.toString(), this.canvas.width / 2 - 300, 200)

    // Draw the paddles score (right)
    this.context.fillText(this.paddle.score.toString(), this.canvas.width / 2 + 300, 200)

    // Change the font size for the center score text
    this.context.font = "30px Courier New"

    // Draw the winning score (center)
    this.context.fillText("Round " + (Pong.round + 1), this.canvas.width / 2, 35)

    // Change the font size for the center score value
    this.context.font = "40px Courier"

    // Draw the current round number
    this.context.fillText(
      String(rounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1]),
      this.canvas.width / 2,
      100,
    )
  },

  loop: function () {
    Pong.update()
    Pong.draw()

    // If the game is not over, draw the next frame.
    if (!Pong.over) requestAnimationFrame(Pong.loop)
  },

  listen: function () {
    document.addEventListener("touchstart", async function () {
      if (!Pong.running) {
        if (device.isConnected()) {
          if (device instanceof ForceBoard || device instanceof Motherboard || device instanceof Progressor) {
            await device.stream()
          }
          Pong.running = true
          window.requestAnimationFrame(Pong.loop)
        } else {
          await device.connect(async () => {
            if (device instanceof ForceBoard || device instanceof Motherboard || device instanceof Progressor) {
              // Request notifications
              await device.stream()
              // Play game
              Pong.running = true
              window.requestAnimationFrame(Pong.loop)
            }
          })
        }
      }
    })

    document.addEventListener("keydown", async function (key) {
      // Handle the 'Press any key to begin' function and start the game.
      if (!Pong.running) {
        if (device.isConnected()) {
          if (device instanceof ForceBoard || device instanceof Motherboard || device instanceof Progressor) {
            await device.stream()
          }
          Pong.running = true
          window.requestAnimationFrame(Pong.loop)
        } else {
          await device.connect(async () => {
            if (device instanceof ForceBoard || device instanceof Motherboard || device instanceof Progressor) {
              // Request notifications
              await device.stream()
              // Play game
              Pong.running = true
              window.requestAnimationFrame(Pong.loop)
            }
          })
        }
      }
      // Handle up arrow and w key events
      if (key.key === "ArrowUp" || key.key === "w") Pong.player.move = DIRECTION.UP

      // Handle down arrow and s key events
      if (key.key === "ArrowDown" || key.key === "s") Pong.player.move = DIRECTION.DOWN
    })

    // Stop the player from moving when there are no keys being pressed.
    document.addEventListener("keyup", function () {
      Pong.player.move = DIRECTION.IDLE
    })
  },

  // Reset the ball location, the player turns and set a delay before the next round begins.
  _resetTurn: function (victor, loser) {
    this.ball = Ball.new.call(this, this.ball.speed)
    this.turn = loser
    this.timer = new Date().getTime()

    victor.score++
    beep2.play()
  },

  // Wait for a delay to have passed after each turn.
  _turnDelayIsOver: function () {
    return new Date().getTime() - this.timer >= 1000
  },

  // Select a random color as the background of each level/round.
  _generateRoundColor: function () {
    const newColor = colors[Math.floor(Math.random() * colors.length)]
    if (newColor === this.color) return Pong._generateRoundColor()
    return newColor
  },
}

let Pong: GameType = Object.assign({}, Game)
Pong.initialize()
